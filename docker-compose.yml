services:
  keycloak:
    container_name: keycloak
    command: start --optimized
    build:
      dockerfile: ./keycloak/Dockerfile
      args:
        KC_VER: "${KC_VER}"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      TZ: "Asia/Tokyo"
      KC_LOG: "console,file"
      KC_LOG_LEVEL: "INFO,org.keycloak.events:DEBUG"
      KC_LOG_CONSOLE_FORMAT: "%d{yyyy-MM-dd HH:mm:ss.SSS} %s%e%n"
      KC_LOG_FILE_OUTPUT: json
    ports:
    - "8443:8443"
    volumes:
    - type: volume
      source: keycloak-log
      target: /opt/keycloak/data/log
    depends_on:
    - postgres

  postgres:
    image: postgres:${PG_VER}
    container_name: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    volumes:
    - type: volume
      source: postgres-data
      target: /var/lib/postgresql/data

  create_certs:
    container_name: create_certs
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VER}
    command: >
      bash -c '
        if [[ ! -f /certs/bundle.zip ]]; then
          bin/elasticsearch-certutil cert --silent --pem --in config/certificates/instances.yml -out /certs/bundle.zip;
          unzip /certs/bundle.zip -d /certs;
        fi;
        chown -R 1000:0 /certs
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes:
    - type: bind
      source: ./certs
      target: /certs
    - type: bind
      source: ./elasticsearch/instances.yml
      target: /usr/share/elasticsearch/config/certificates/instances.yml

  elasticsearch:
    build:
      dockerfile: ./elasticsearch/Dockerfile
      args:
        ELK_VER: "${ELK_VER}"
        ELK_KC_CLIENT_SECRET: "${ELK_KC_CLIENT_SECRET}"
    container_name: elasticsearch
    environment:
      ELASTIC_PASSWORD: changeme
      ES_JAVA_OPTS: -Xms1024m -Xmx1024m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
    - type: volume
      source: es_data
      target: /usr/share/elasticsearch/data
    - type: bind
      source: ./certs
      target: /usr/share/elasticsearch/config/certificates
    - type: bind
      source: ./elasticsearch/elasticsearch.yml
      target: /usr/share/elasticsearch/config/elasticsearch.yml
    - type: volume
      source: elasticsearch-log
      target: /usr/share/elasticsearch/logs
    ports:
    - "9200:9200"

  kibana:
    build:
      dockerfile: ./kibana/Dockerfile
      args:
        ELK_VER: "${ELK_VER}"
    container_name: kibana
    ports:
    - "5601:5601"
    volumes:
    - type: bind
      source: ./certs/kibana
      target: /usr/share/kibana/config/certs
    - type: bind
      source: ./certs/ca/ca.crt
      target: /usr/share/kibana/config/certs/ca.crt
    - type: bind
      source: ./kibana/kibana.yml
      target: /usr/share/kibana/config/kibana.yml
    - type: volume
      source: kibana-log
      target: /usr/share/kibana/logs
    depends_on:
      - elasticsearch

  oauth2proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
    container_name: oauth2proxy
    environment:
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      OAUTH2_PROXY_AUTH_LOGGING: "true"
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_SECURE: "false"
      OAUTH2_PROXY_SCOPE: "openid"
      OAUTH2_PROXY_UPSTREAMS: http://httpbin
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: keycloak
      OAUTH2_PROXY_OIDC_ISSUER_URL: https://keycloak:8443/realms/dummy
      OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY: "true"
      OAUTH2_PROXY_INSECURE_OIDC_SKIP_ISSUER_VERIFICATION: "true"
      OAUTH2_PROXY_CLIENT_ID: oauth2_proxy
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_PASS_USER_HEADERS: "true"
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_REDIRECT_URL: http://localhost:4180/oauth2/callback
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
    ports:
      - "4180:4180"

  httpbin:
    image: kennethreitz/httpbin:latest
    container_name: httpbin

  vector:
    image: timberio/vector:0.28.0-debian
    container_name: vector
    ports:
      - "8686:8686"
    volumes:
    - type: bind
      source: ./vector/vector.toml
      target: /etc/vector/vector.toml
    - type: volume
      source: keycloak-log
      target: /opt/keycloak/data/log
      read_only: true
    - type: volume
      source: kibana-log
      target: /usr/share/kibana/logs
      read_only: true
    - type: volume
      source: elasticsearch-log
      target: /usr/share/elasticsearch/logs
      read_only: true

volumes:
  postgres-data:
  keycloak-log:
  kibana-log:
  elasticsearch-log:
  es_data:
